#!/usr/bin/env python3
"""
Interactive FRED Economic Data Agent Tester
Run this to test your agent with any query without modifying main.py
Saves all outputs to files for GitHub hosting
"""

import os
import json
import sys
import io
from datetime import datetime
from crew_definition import FREDEconomicCrew
from logging_config import setup_logging

logger = setup_logging()

# Create output directory for examples
OUTPUT_DIR = "agent_examples"
os.makedirs(OUTPUT_DIR, exist_ok=True)

class TeeWriter:
    """Write to both console and a string buffer"""
    def __init__(self, console, buffer):
        self.console = console
        self.buffer = buffer
    
    def write(self, message):
        self.console.write(message)
        self.buffer.write(message)
    
    def flush(self):
        self.console.flush()
        self.buffer.flush()

def test_query(query: str, test_name=None):
    """
    Test the FRED agent with a custom query - exactly like main.py but saves output
    """
    print("\n" + "="*80)
    print("üß™ FRED Economic Data Agent - Standalone Test")
    print("="*80 + "\n")
    
    # Capture all console output
    log_buffer = io.StringIO()
    original_stdout = sys.stdout
    original_stderr = sys.stderr
    
    sys.stdout = TeeWriter(original_stdout, log_buffer)
    sys.stderr = TeeWriter(original_stderr, log_buffer)
    
    try:
        input_data = {"text": query}
        crew = FREDEconomicCrew()
        result = crew.crew.kickoff(input_data)
        
        print("\n" + "="*80)
        print("üìä FRED AGENT RESPONSE:")
        print("="*80)
        print(result)
        print("="*80 + "\n")
        
        # Get captured logs
        captured_logs = log_buffer.getvalue()
        
        # Save output to file with logs
        save_query_result(query, result, test_name, logs=captured_logs)
        
        return result
    finally:
        # Restore original stdout/stderr
        sys.stdout = original_stdout
        sys.stderr = original_stderr

def save_query_result(query: str, result, test_name=None, is_error=False, logs=None):
    """
    Save query result to a file for GitHub hosting
    """
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    # Create safe filename from query or test name
    if test_name:
        safe_name = "".join(c for c in test_name if c.isalnum() or c in (' ', '-', '_')).rstrip()
        safe_name = safe_name.replace(' ', '_').lower()
    else:
        safe_name = "".join(c for c in query[:50] if c.isalnum() or c in (' ', '-', '_')).rstrip()
        safe_name = safe_name.replace(' ', '_').lower()
    
    # Create filename
    status = "error" if is_error else "success"
    filename = f"{safe_name}_{status}_{timestamp}.md"
    filepath = os.path.join(OUTPUT_DIR, filename)
    
    # Prepare content
    content = f"""# FRED Economic Data Agent - Query Result

**Query:** {query}

**Timestamp:** {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

**Status:** {'‚ùå Error' if is_error else '‚úÖ Success'}

---

## Agent Response

```
{result}
```

---

## About This Example

This is an example output from the FRED Economic Data Agent, demonstrating its ability to:
- Search the FRED database for economic data
- Retrieve real-time economic indicators
- Provide expert analysis and context
- Generate direct links to FRED data sources

**Agent Capabilities:**
- Real-time economic data access
- Historical trend analysis
- Expert economic interpretation
- Related data series recommendations
- Direct FRED database integration

**Tech Stack:** Python, FastAPI, CrewAI, FRED API, OpenAI GPT-4, Masumi Payment Integration

---
*Generated by FRED Economic Data Agent - Ready for Sokosumi Marketplace*
"""
    
    # Save to file
    with open(filepath, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"üíæ Output saved to: {filepath}")
    
    # Save logs if provided
    log_filepath = None
    if logs:
        log_filename = f"{safe_name}_{status}_{timestamp}.log"
        log_filepath = os.path.join(OUTPUT_DIR, log_filename)
        with open(log_filepath, 'w', encoding='utf-8') as f:
            f.write(logs)
        print(f"üìã Logs saved to: {log_filepath}")
    
    # Also save as JSON for structured data
    json_filename = f"{safe_name}_{status}_{timestamp}.json"
    json_filepath = os.path.join(OUTPUT_DIR, json_filename)
    
    json_data = {
        "query": query,
        "timestamp": datetime.now().isoformat(),
        "status": status,
        "result": str(result),
        "has_logs": logs is not None,
        "log_file": log_filename if logs else None,
        "agent_info": {
            "name": "FRED Economic Data Agent",
            "version": "2.0.0",
            "capabilities": [
                "Real-time economic data access",
                "Historical trend analysis", 
                "Expert economic interpretation",
                "Related data series recommendations",
                "Direct FRED database integration",
                "Comprehensive statistical calculations"
            ],
            "tech_stack": [
                "Python", "FastAPI", "CrewAI", "FRED API", 
                "OpenAI GPT-4", "Masumi Payment Integration"
            ]
        }
    }
    
    with open(json_filepath, 'w', encoding='utf-8') as f:
        json.dump(json_data, f, indent=2, ensure_ascii=False)
    
    print(f"üìÑ JSON data saved to: {json_filepath}")


def run_showcase_tests():
    """
    Run comprehensive showcase tests to demonstrate agent capabilities
    """
    print("\n" + "üöÄ FRED Agent Showcase Tests - Generating Examples for GitHub üöÄ".center(80))
    print("="*80)
    print("\nRunning comprehensive tests to showcase agent capabilities...")
    print(f"Outputs will be saved to: {OUTPUT_DIR}/")
    print("="*80 + "\n")
    
    # Comprehensive test suite
    showcase_tests = [
        {
            "name": "current_unemployment_rate",
            "query": "What is the current unemployment rate in the United States?",
            "description": "Basic economic indicator query"
        },
        {
            "name": "inflation_analysis",
            "query": "What is the current inflation rate and how has it changed over the last 12 months?",
            "description": "Inflation trend analysis"
        },
        {
            "name": "federal_funds_rate",
            "query": "What is the current federal funds rate and what does it indicate about monetary policy?",
            "description": "Monetary policy analysis"
        },
        {
            "name": "gdp_growth_trends",
            "query": "Show me GDP growth data for the last 5 years and identify any trends or patterns",
            "description": "Historical GDP analysis"
        },
        {
            "name": "recession_indicators",
            "query": "Analyze the unemployment rate during the 2008 financial crisis and compare it to current levels",
            "description": "Crisis comparison analysis"
        },
        {
            "name": "employment_metrics_comparison",
            "query": "Compare the unemployment rate, employment-population ratio, and labor force participation rate",
            "description": "Multi-metric comparison"
        },
        {
            "name": "economic_indicators_correlation",
            "query": "How do interest rates, inflation, and unemployment typically relate to each other?",
            "description": "Economic correlation analysis"
        },
        {
            "name": "recession_prediction_indicators",
            "query": "What economic indicators should I watch to predict potential recession?",
            "description": "Economic forecasting guidance"
        },
        {
            "name": "policy_impact_analysis",
            "query": "How did the Federal Reserve's interest rate changes affect unemployment over the past 2 years?",
            "description": "Policy impact analysis"
        },
        {
            "name": "consumer_price_index_trends",
            "query": "What does the consumer price index show about inflation over the past decade?",
            "description": "Long-term inflation analysis"
        }
    ]
    
    print(f"üß™ Running {len(showcase_tests)} showcase tests...\n")
    
    for idx, test in enumerate(showcase_tests, 1):
        print(f"\n{'='*20} Test {idx}/{len(showcase_tests)}: {test['name']} {'='*20}")
        print(f"Description: {test['description']}")
        print(f"Query: {test['query']}")
        print("-" * 80)
        
        test_query(test['query'], test_name=test['name'])
        
        if idx < len(showcase_tests):
            cont = input(f"\nPress Enter to continue to test {idx+1} (or 'q' to quit): ").strip().lower()
            if cont == 'q':
                break
    
    print(f"\nüéâ Showcase tests completed! Check the {OUTPUT_DIR}/ directory for all saved examples.")
    print("These files are ready to be hosted on GitHub to showcase your agent's capabilities!")

def main():
    """
    Run interactive query session
    """
    print("\n" + "üè¶ FRED Economic Data Agent - Interactive Tester üè¶".center(80))
    print("="*80)
    print("\nThis tool lets you test your FRED agent with any economic data query.")
    print("\nExample queries:")
    print("  ‚Ä¢ What is the current unemployment rate?")
    print("  ‚Ä¢ Show me GDP growth data")
    print("  ‚Ä¢ Get inflation rate trends")
    print("  ‚Ä¢ What is the federal funds rate?")
    print("  ‚Ä¢ Show me consumer price index data")
    print("\n" + "="*80 + "\n")
    
    # Option to run predefined queries or custom
    print("Choose an option:")
    print("1. Enter your own query")
    print("2. Run example queries")
    print("3. Run comprehensive showcase tests (for GitHub examples)")
    print("4. Exit")
    
    choice = input("\nEnter choice (1-4): ").strip()
    
    if choice == "1":
        # Custom query
        print("\n" + "-"*80)
        query = input("Enter your economic data query: ").strip()
        if query:
            test_query(query, test_name="custom_query")
        else:
            print("‚ùå No query entered.")
            
    elif choice == "2":
        # Example queries
        examples = [
            "What is the current unemployment rate in the United States?",
            "Show me GDP growth data",
            "What is the inflation rate?",
            "Get consumer price index trends",
        ]
        
        print("\nüß™ Running example queries...\n")
        for idx, query in enumerate(examples, 1):
            print(f"\nüìã Example {idx}/{len(examples)}")
            test_query(query, test_name=f"example_{idx}")
            
            if idx < len(examples):
                cont = input("\nPress Enter to continue to next query (or 'q' to quit): ").strip().lower()
                if cont == 'q':
                    break
                    
    elif choice == "3":
        # Run showcase tests
        run_showcase_tests()
                    
    elif choice == "4":
        print("\nüëã Goodbye!\n")
        return
    else:
        print("\n‚ùå Invalid choice.\n")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã Interrupted by user. Goodbye!\n")
    except Exception as e:
        print(f"\n‚ùå Unexpected error: {str(e)}\n")
